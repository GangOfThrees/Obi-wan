// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO obiwan.users (
  email, password, firstName, lastName, dob
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, password, firstname, lastname, dob, createdat, updatedat, deletedat
`

type CreateUserParams struct {
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Dob       time.Time `json:"dob"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (ObiwanUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
	)
	var i ObiwanUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE obiwan.users
  SET deletedAt = CURRENT_TIMESTAMP
WHERE id = $1 AND deletedAt IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, firstname, lastname, dob, createdat, updatedat, deletedat FROM obiwan.users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (ObiwanUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i ObiwanUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, firstname, lastname, dob, createdat, updatedat, deletedat FROM obiwan.users
WHERE deletedAt IS NULL
`

func (q *Queries) ListUsers(ctx context.Context) ([]ObiwanUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ObiwanUser
	for rows.Next() {
		var i ObiwanUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Dob,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE obiwan.users
  SET firstName = CASE WHEN $2 IS NOT NULL THEN $2 ELSE firstName END,
  lastName = CASE WHEN $3 IS NOT NULL THEN $3 ELSE lastName END,
  dob = CASE WHEN $4 IS NOT NULL THEN $4 ELSE dob END,
  updatedAt = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password, firstname, lastname, dob, createdat, updatedat, deletedat
`

type UpdateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Dob       time.Time `json:"dob"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (ObiwanUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
	)
	var i ObiwanUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}
